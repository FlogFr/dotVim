# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r"))]
	{
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:char}> v${2};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`}
	{
		${2}
	} /* $1 */
# Class
snippet cl
	class ${1:`Filename('$1', 'name')`}
	{
		private:
			${3:/* data */}

		public:
			explicit $1 (${2});
			virtual ~$1 ();
	};
snippet fori
	for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++})
	{
		${4:/* code */}
	}
# foreach
snippet foreach
	foreach(${1:current}, ${2:MY_QLIST})
	{
		${3:/* code */}
	}
snippet qdebug
	qDebug() << "[Debug] $1 (" << ${1:my_variable} << ")";${2}
snippet qdebu
	qDebug() << "[Debug] $1 (" << ${1:my_variable} << ")";${2}
snippet qde
	qDebug() << "[Debug] $1 (" << ${1:my_variable} << ")";${2}
snippet Inc Cpp file with .hpp file
	#include "${1:`Filename("$1")`}.hpp"${2}
snippet Inc Cxx file with .hxx file
	#include "${1:`Filename("$1")`}.hxx"${2}
snippet re
	return ${1};${2}
snippet tpl_cl
	#ifndef $1
	#define ${1:`toupper(Filename("$1_H"))`}

	cl${2}

	#endif
