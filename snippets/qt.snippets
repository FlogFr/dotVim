# main()
snippet main
	int main(int argc, char *argv[])
	{
		${1}
		return 0;
	}
# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r"))]
	{
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:char}> v${2};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`}
	{
		${2}
	}; /* $1 */
# Class
snippet cl
	class ${1:`Filename('$1', 'name')`}
	{
		public:
			explicit $1();
			explicit $1(const $1& `tolower("$1")`);
			virtual ~$1();
		private:
			${3:/* data */}
	};
snippet fori
	for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++})
	{
		${4:/* code */}
	}
snippet st
	struct ${1:name}
	{
		${2:field}
	};
# foreach
snippet foreach
	foreach(${1:current}, ${2:MY_QLIST})
	{
		${3:/* code */}
	}
snippet qdebug
	qDebug() << "[Debug] $1 (" << ${1:my_variable} << ")";${2}
snippet debu
	qDebug() << "[Debug] $1:" << ${1:my_var};
snippet cou
	cout << "[Cout] : " << ${1} << endl;
snippet Inc Cpp file with .hpp file
	#include "${1:`Filename("$1")`}.hpp"${2}
snippet inc 
	#include <${1:`Filename("$1")`}${2:.hpp}>${3}
snippet re
	return ${1};${2}
snippet def
	#define ${1:}
snippet ife
	if (${1:})
	{
		${2:// body}
	}
	else
	{
		${3:// body}
	}
	${4:}
snippet ifndef
	#ifndef ${1:`toupper(Filename("$1"))`}_HPP
	#define $1

	#endif
snippet deflib
	#if defined(${1:VAR}_LIBRARY)
	#define $1_EXPORT Q_DECL_EXPORT
	#else
	#define $1_EXPORT Q_DECL_IMPORT
	#endif
snippet tpl_cl
	#ifndef $1
	#define ${1:`toupper(Filename("$1_HPP"))`}

	cl${2}

	#endif
snippet getter
	const ${2:type}& ${1:name}() const;
snippet setter
	void ${1:name}(const ${2:type}& arg);
# This is kind of convenient
snippet .
	::
snippet t
	this->
snippet re
	return ${1:};${2:}
snippet if
	if (${1:cond})
	{
		${2://body}
	}
